# Default values for clair.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: quay.io/projectquay/clair
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "4.7.2"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Database Configuration
database:
  indexer:
    # Override takes precedence over any of the succeeding configs.
    # uriOverride: "host=clairdb user=pqgotest dbname=pqgotest sslmode=verify-full"
    # uriOverride: "postgres://pqgotest:password@localhost/pqgotest?sslmode=verify-full"
    host: ""
    port: "5432"
    name: ""
    user: ""
    password: ""
    sslMode: "verify-full"
  # matcher:
  # notifier:

auth: {}
# auth:
#   psk:
#     key: 'c2VjcmV0'
#     iss:
#       - quay
#       - clairctl

# Indexer configuration
indexer:
  scanLockRetry: 10
  layerScanConcurrency: 5
  migrations: true
  scanner: {}
  airgap: false

matcher:
  migrations: true
  period: "6h"
  disableUpdaters: false
  updateRetention: 10

notifier:
  migrations: true
  indexerAddress: "http://clair-indexer:8080/"
  matcherAddress: "http://clair-matcher:8080/"
  pollInterval: "1m"
  deliveryInterval: "30s"
  disableSummary: false
  webhook: {}
    # target: "http://webhook-target/"
    # callback: "http://clair-notifier:6060/notifier/api/v1/notification/"
  amqp: {}
  stomp: {}

trace: {}
# trace:
#   name: "jaeger"
#   probability: 1
#   jaeger:
#     agent:
#       endpoint: "clair-jaeger:6831"
#     service_name: "clair"

matchers: {}
# matchers:
#   names:
#     - alpine
#     - aws
#     - debian
#     - python
#     - rhel
#     - ubuntu
#   config:
#     python:
#       ignore_vulns:
#         - CVE-XYZ
#         - CVE-ABC

updaters: {}
# updaters:
#   sets:
#     - alpine
#     - aws
#     - debian
#     - rhel
#     - ubuntu
#   config:
#     ubuntu:
#       security_tracker_url: http://security.url
#       ignore_distributions: 
#         - cosmic

http:
  address: ""
  port: 6060

introspection:
  address: ""
  port: 8089

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

introspectionService:
  type: ClusterIP
  port: 8089

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
- name: clair
  configMap:
    name: clair
    items:
    - key: config.yaml
      path: config.yaml
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
- name: clair
  mountPath: "/config"
  readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

logLevel: "info"
